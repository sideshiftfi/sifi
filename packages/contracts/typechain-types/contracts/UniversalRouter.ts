/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type RouterParametersStruct = {
  weth: PromiseOrValue<string>;
  balancerRouter: PromiseOrValue<string>;
  bancorRouter: PromiseOrValue<string>;
  uniswapV2Factory: PromiseOrValue<string>;
  uniswapV3Factory: PromiseOrValue<string>;
  sushiswapRouter: PromiseOrValue<string>;
  pancakeswapRouter: PromiseOrValue<string>;
  shibaswapRouter: PromiseOrValue<string>;
  hyphenBridge: PromiseOrValue<string>;
  celerBridge: PromiseOrValue<string>;
  hopEthBridge: PromiseOrValue<string>;
  hopUsdcBridge: PromiseOrValue<string>;
  hopUsdtBridge: PromiseOrValue<string>;
  hopDaiBridge: PromiseOrValue<string>;
  hopWbtcBridge: PromiseOrValue<string>;
  hopMaticBridge: PromiseOrValue<string>;
  acrossBridge: PromiseOrValue<string>;
  multichainErc20Bridge: PromiseOrValue<string>;
  multichainEthBridge: PromiseOrValue<string>;
  synapseBridge: PromiseOrValue<string>;
  allBridge: PromiseOrValue<string>;
  portalBridge: PromiseOrValue<string>;
  optimismBridge: PromiseOrValue<string>;
  polygonPosBridge: PromiseOrValue<string>;
  polygonApproveAddr: PromiseOrValue<string>;
  omniBridge: PromiseOrValue<string>;
};

export type RouterParametersStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  uniswapV2Router: string;
  sushiswapRouter: string;
  uniswapV3Router: string;
  curveRouter: string;
  balancerRouter: string;
  bancorRouter: string;
  routerCollector: string;
};

export interface UniversalRouterInterface extends utils.Interface {
  functions: {
    "multiExecute(bytes,bytes[])": FunctionFragment;
    "routeExecute(bytes,bytes[],uint256)": FunctionFragment;
    "singleExecute(bytes1,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "multiExecute" | "routeExecute" | "singleExecute"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "multiExecute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "routeExecute",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "singleExecute",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "multiExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routeExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singleExecute",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UniversalRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniversalRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    multiExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    routeExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singleExecute(
      command: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  multiExecute(
    commands: PromiseOrValue<BytesLike>,
    inputs: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  routeExecute(
    commands: PromiseOrValue<BytesLike>,
    inputs: PromiseOrValue<BytesLike>[],
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singleExecute(
    command: PromiseOrValue<BytesLike>,
    input: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    multiExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    routeExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    singleExecute(
      command: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    multiExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    routeExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singleExecute(
      command: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    multiExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    routeExecute(
      commands: PromiseOrValue<BytesLike>,
      inputs: PromiseOrValue<BytesLike>[],
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singleExecute(
      command: PromiseOrValue<BytesLike>,
      input: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
